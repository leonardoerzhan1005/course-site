<?php



/** convert minutes to hours */

use App\Models\Cart;

if(!function_exists('convertMinutesToHours')) {
    function convertMinutesToHours(int $minutes) : string {
        $hours = floor($minutes / 60);
        $minutes = $minutes % 60;
        return sprintf('%dh %02dm', $hours, $minutes); // Returns format : 1h 30m
    }

}

if(!function_exists('user')) {
    function user() {
        return auth('web')->user();
    }
}


if(!function_exists('adminUser')) {
    function adminUser() {
        return auth('admin')->user();
    }
}

/** calculate cart total */
if(!function_exists('cartCount')) {
    function cartCount() {
        return Cart::where('user_id', user()?->id)->count();
    }
}


/** calculate cart total */
if(!function_exists('cartTotal')) {
    function cartTotal() {
        $total = 0;

        $cart = Cart::where('user_id', user()->id)->get();

        foreach($cart as $item) {
            if($item->course->discount > 0) {
                $total += $item->course->discount;
            }else {
                $total += $item->course->price;
            }
        }

        return $total;
    }
}

/** calculate cart total */
if(!function_exists('calculateCommission')) {
    function calculateCommission($amount, $commission) {
        return $amount == 0 ? 0 : ($amount * $commission) / 100;
    }
}

/** Sidebar Item Active */
if(!function_exists('sidebarItemActive')) {
    function sidebarItemActive(array $routes) {

        foreach($routes as $route) {
            if(request()->routeIs($route)) {
                return 'active';
            }
        }
    }
}

/** Get Current Locale */
if(!function_exists('currentLocale')) {
    function currentLocale() {
        return app()->getLocale();
    }
}

/** Get Supported Locales */
if(!function_exists('supportedLocales')) {
    function supportedLocales() {
        return config('locales.supported', ['en', 'ru', 'kk']);
    }
}

/** Get Locale Name */
if(!function_exists('localeName')) {
    function localeName($locale = null) {
        $locale = $locale ?: currentLocale();
        $names = config('locales.names', [
            'en' => 'English',
            'ru' => '–†—É—Å—Å–∫–∏–π',
            'kk' => '“ö–∞–∑–∞“õ—à–∞'
        ]);
        return $names[$locale] ?? strtoupper($locale);
    }
}

/** Get Locale Flag */
if(!function_exists('localeFlag')) {
    function localeFlag($locale = null) {
        $locale = $locale ?: currentLocale();
        $flags = config('locales.flags', [
            'en' => 'üá∫üá∏',
            'ru' => 'üá∑üá∫',
            'kk' => 'üá∞üáø'
        ]);
        return $flags[$locale] ?? 'üåê';
    }
}

/** Check if locale is current */
if(!function_exists('isCurrentLocale')) {
    function isCurrentLocale($locale) {
        return currentLocale() === $locale;
    }
}

/** Generate localized route URL */
if(!function_exists('localizedRoute')) {
    function localizedRoute($name, $parameters = [], $absolute = true) {
        // –ï—Å–ª–∏ $parameters - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
        if (is_string($parameters)) {
            $parameters = ['slug' => $parameters];
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ $parameters - –º–∞—Å—Å–∏–≤
        if (!is_array($parameters)) {
            $parameters = [];
        }
        
        $parameters['locale'] = $parameters['locale'] ?? app()->getLocale();
        return route($name, $parameters, $absolute);
    }
}

/** Generate localized URL */
if(!function_exists('localizedUrl')) {
    function localizedUrl($path = '', $parameters = [], $secure = null) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ $parameters - –º–∞—Å—Å–∏–≤
        if (!is_array($parameters)) {
            $parameters = [];
        }
        
        $locale = app()->getLocale();
        $localizedPath = $locale . '/' . ltrim($path, '/');
        return url($localizedPath, $parameters, $secure);
    }
}

/** Generate localized URL with translated paths */
if(!function_exists('localizedUrlWithPath')) {
    function localizedUrlWithPath($path = '', $parameters = [], $secure = null) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ $parameters - –º–∞—Å—Å–∏–≤
        if (!is_array($parameters)) {
            $parameters = [];
        }
        
        $locale = app()->getLocale();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—É—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        $localizedPaths = [
            'en' => [
                'courses' => 'courses',
                'blog' => 'blog',
                'about' => 'about',
                'contact' => 'contact',
                'cart' => 'cart',
                'checkout' => 'checkout',
                'dashboard' => 'dashboard',
                'profile' => 'profile',
                'login' => 'login',
                'register' => 'register',
                'password' => 'password',
                'verification' => 'verification',
                'logout' => 'logout',
            ],
            'ru' => [
                'courses' => '–∫—É—Ä—Å—ã',
                'blog' => '–±–ª–æ–≥',
                'about' => '–æ-–Ω–∞—Å',
                'contact' => '–∫–æ–Ω—Ç–∞–∫—Ç—ã',
                'cart' => '–∫–æ—Ä–∑–∏–Ω–∞',
                'checkout' => '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
                'dashboard' => '–ø–∞–Ω–µ–ª—å',
                'profile' => '–ø—Ä–æ—Ñ–∏–ª—å',
                'login' => '–≤—Ö–æ–¥',
                'register' => '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                'password' => '–ø–∞—Ä–æ–ª—å',
                'verification' => '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                'logout' => '–≤—ã—Ö–æ–¥',
            ],
            'kk' => [
                'courses' => '–∫—É—Ä—Å—Ç–∞—Ä',
                'blog' => '–±–ª–æ–≥',
                'about' => '–±—ñ–∑-—Ç—É—Ä–∞–ª—ã',
                'contact' => '–±–∞–π–ª–∞–Ω—ã—Å',
                'cart' => '—Å–µ–±–µ—Ç',
                'checkout' => '—Ç–∞–ø—Å—ã—Ä—ã—Å',
                'dashboard' => '–ø–∞–Ω–µ–ª—å',
                'profile' => '–ø—Ä–æ—Ñ–∏–ª—å',
                'login' => '–∫—ñ—Ä—É',
                'register' => '—Ç—ñ—Ä–∫–µ—É',
                'password' => '“õ“±–ø–∏—è-—Å”©–∑',
                'verification' => '—Ä–∞—Å—Ç–∞—É',
                'logout' => '—à—ã“ì—É',
            ],
        ];
        
        $paths = $localizedPaths[$locale] ?? $localizedPaths['en'];
        
        // –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—É—Ç–∏ –Ω–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
        foreach ($paths as $enPath => $localizedPath) {
            $path = str_replace($enPath, $localizedPath, $path);
        }
        
        $localizedPath = $locale . '/' . ltrim($path, '/');
        return url($localizedPath, $parameters, $secure);
    }
}

/** Generate localized route with translated paths */
if(!function_exists('localizedRouteWithPath')) {
    function localizedRouteWithPath($name, $parameters = [], $absolute = true) {
        // –ï—Å–ª–∏ $parameters - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
        if (is_string($parameters)) {
            $parameters = ['slug' => $parameters];
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ $parameters - –º–∞—Å—Å–∏–≤
        if (!is_array($parameters)) {
            $parameters = [];
        }
        
        $locale = app()->getLocale();
        $parameters['locale'] = $parameters['locale'] ?? $locale;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ª–æ–∫–∞–ª—å—é
        $localizedName = $locale . '.' . $name;
        
        return route($localizedName, $parameters, $absolute);
    }
}

/** Get current localized path without locale prefix */
if(!function_exists('currentLocalizedPath')) {
    function currentLocalizedPath() {
        $path = request()->path();
        $locale = app()->getLocale();
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ª–æ–∫–∞–ª–∏
        if (str_starts_with($path, $locale . '/')) {
            $path = substr($path, strlen($locale) + 1);
        }
        
        return $path;
    }
}

/** Check if current path matches localized path */
if(!function_exists('isLocalizedPath')) {
    function isLocalizedPath($path) {
        $currentPath = currentLocalizedPath();
        return $currentPath === $path;
    }
}

